version: "3.9"

services:
    # php
    app:
        image: 'php81'
        container_name: php
        build:
            context: .
            dockerfile: ./docker/php/Dockerfile
        ports:
            - "9000:9000"
        volumes:
            - ./:/var/www/web
        working_dir: /var/www/web
        networks:
            - app-network

    # web server
    nginx:
        image: nginx:stable-alpine
        container_name: nginx
        ports:
            - "8080:80"
        volumes:
            - ./:/var/www/web
            - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
        depends_on:
            - app
            - db
        networks:
            - app-network

    # database
    db:
        image: mariadb:10.8.3
        container_name: mariadb
        ports:
            - "3306:3306"
        volumes:
            - ./docker/data/mariadb:/var/lib/mysql
        environment:
            MYSQL_DATABASE: test_db
            MYSQL_USER: test_user
            MYSQL_PASSWORD: test_pass
            MYSQL_ROOT_PASSWORD: root_pass
        networks:
            - app-network

    redis:
        image: redis:alpine
        container_name: redis
        ports:
            - "6379:6379"
        networks:
            - app-network

    mailhog:
        image: mailhog/mailhog:latest
        container_name: mailhog
        ports:
            - "8025:8025"
        networks:
            - app-network

    composer:
        image: composer:latest
        container_name: composer
        volumes:
            - ./:/var/www/web
        working_dir: /var/www/web
        entrypoint: [ 'composer', '--ignore-platform-reqs' ]
        networks:
            - app-network

    rabbitmq:
        image: rabbitmq:3.10.2-management-alpine
        container_name: rabbitmq
        environment:
            RABBITMQ_DEFAULT_USER: ruser
            RABBITMQ_DEFAULT_PASS: rpass
            RABBITMQ_DEFAULT_VHOST: /
        ports:
            - "15672:15672"
            - "5672:5672"
        networks:
            - app-network

# docker networks
networks:
    app-network:
        driver: bridge
